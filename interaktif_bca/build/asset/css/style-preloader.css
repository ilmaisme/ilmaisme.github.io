/**
* Interaktif BCA
* TODO : styling for preloader
* --
* * for preloader: index.html
* * author: ilmaisme.github.io
* ? style.min.css
* ! important to minify
*/
/**
* * base
*/
.preloader {
  top: 0;
  background: linear-gradient(180deg, #FFFFFF 0%, #EFEFEF 100%);
  background-image: url(./asset/images/white-bg-mob.jpg);
  background-size: cover;
  background-repeat: no-repeat;
  background-position: bottom center;
  transition: opacity .3s ease-in-out;
  height: 100%;
  width: 100%;
  z-index: 1001;
  position: fixed;
  display: flex;
  justify-content: center;
  overflow: hidden; }
  @media (min-width: 1024px) {
    .preloader {
      background: linear-gradient(180deg, #FFFFFF 0%, #EFEFEF 100%);
      background-image: url(./asset/images/white-bg.jpg);
      background-size: cover;
      background-repeat: no-repeat;
      background-position: bottom center; } }
  .preloaderWrap {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    position: relative;
    font-family: "BCA", sans-serif;
    font-size: 14px;
    font-weight: 400;
    line-height: 1.24;
    color: #333333; }
  .preloaderMeter {
    position: relative;
    background: #B7B7B7;
    width: 282px;
    height: 20px;
    border-radius: 17px;
    margin: 24px auto 18px;
    box-sizing: content-box;
    overflow: hidden; }
    .preloaderMeter > span {
      display: block;
      height: 100%;
      border-radius: 17px;
      background-color: #CFAC68;
      box-shadow: inset 0 2px 9px rgba(255, 255, 255, 0.3), inset 0 -2px 6px rgba(0, 0, 0, 0.4);
      position: relative;
      overflow: hidden; }
    .preloaderMeter > span::after,
    .preloaderMeter .anim > span > span {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.2) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0.2) 75%, transparent 75%, transparent);
      z-index: 1;
      background-size: 50px 50px;
      animation: moveloading 2s linear infinite;
      border-radius: 17px;
      overflow: hidden; }
  .preloaderBar {
    width: 0%; }
  .preloaderTxt {
    min-width: 81px; }
  .preloaderLogo {
    -moz-animation: fliploading 3s infinite;
    -o-animation: fliploading 3s infinite;
    -ms-animation: fliploading 3s infinite;
    -webkit-animation: fliploading 3s infinite;
    animation: fliploading 3s infinite; }
    .preloaderLogo img {
      max-width: 35px; }
      @media (min-width: 1024px) {
        .preloaderLogo img {
          max-width: 100%; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
