/**
* * plugin
*/
/* Slider */
/**
* Slick slider
* TODO : plugin styling for slick
* --
* * https://kenwheeler.github.io/slick/
* ? slick.min.css
* ! important to minify
*/
/**
* * base
*/
/* font menu & footer */
.slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -ms-touch-action: pan-y;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent; }

.slick-list {
  position: relative;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0; }
  .slick-list:focus {
    outline: none; }
  .slick-list.dragging {
    cursor: pointer;
    cursor: hand; }

.slick-slider .slick-track,
.slick-slider .slick-list {
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0); }

.slick-track {
  position: relative;
  left: 0;
  top: 0;
  display: block;
  margin-left: auto;
  margin-right: auto; }
  .slick-track:before, .slick-track:after {
    content: "";
    display: table; }
  .slick-track:after {
    clear: both; }
  .slick-loading .slick-track {
    visibility: hidden; }

.slick-slide {
  float: left;
  height: 100%;
  min-height: 1px;
  display: none; }
  [dir="rtl"] .slick-slide {
    float: right; }
  .slick-slide img {
    display: block; }
  .slick-slide.slick-loading img {
    display: none; }
  .slick-slide.dragging img {
    pointer-events: none; }
  .slick-initialized .slick-slide {
    display: block; }
  .slick-loading .slick-slide {
    visibility: hidden; }
  .slick-vertical .slick-slide {
    display: block;
    height: auto;
    border: 1px solid transparent; }

.slick-arrow.slick-hidden {
  display: none; }

/* Arrows */
.slick-prev,
.slick-next {
  font-size: 0;
  line-height: 0;
  position: absolute;
  display: block;
  width: 45px;
  height: 45px;
  padding: 0;
  -webkit-transform: scale(0.8) translate(0, -50%);
  -ms-transform: scale(0.8) translate(0, -50%);
  transform: scale(0.8) translate(0, -50%);
  cursor: pointer;
  color: white;
  border: none;
  outline: none;
  background: transparent;
  border-radius: 50%;
  z-index: 1;
  box-shadow: none;
  transition: opacity 1s ease; }
  @media (min-width: 960px) {
    .slick-prev,
    .slick-next {
      -webkit-transform: translate(0, -50%);
      -ms-transform: translate(0, -50%);
      transform: translate(0, -50%); } }
  .slick-prev.slick-disabled,
  .slick-next.slick-disabled {
    opacity: 0; }
  .slick-prev::after,
  .slick-next::after {
    content: "";
    display: block;
    box-sizing: border-box;
    position: absolute; }
  .slick-prev::after,
  .slick-next::after {
    width: 32px;
    height: 32px;
    top: 5px;
    left: 5px;
    vertical-align: middle;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='enable-background:new 0 0 28 28' viewBox='0 0 28 28'%3E%3Cpath d='M15.5 20.2c-.2-.2-.3-.5-.3-.8 0-.3.1-.6.4-.8l3.3-3.3h-13c-.3 0-.6-.1-.8-.3-.2-.2-.3-.5-.3-.8s.1-.6.3-.8c.2-.2.5-.3.8-.3h13l-3.3-3.3c-.2-.2-.3-.5-.3-.8 0-.3.1-.6.3-.8.2-.2.5-.3.8-.3.3 0 .6.1.8.3l5.3 5.3c.1.1.2.2.2.4 0 .1.1.3.1.4s0 .3-.1.4c0 .1-.1.3-.2.4l-5.4 5.4c-.2.2-.5.3-.8.3-.3-.3-.5-.4-.8-.6z'/%3E%3C/svg%3E");
    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(103%) contrast(103%); }

.slick-prev {
  left: 8px;
  top: calc(50% - 24px);
  transform: rotate(180deg); }
  @media (min-width: 768px) {
    .slick-prev {
      left: 178px; } }

.slick-next {
  top: 50%;
  right: 8px; }
  @media (min-width: 768px) {
    .slick-next {
      right: 178px; } }

.slick-dots {
  display: flex; }
  .slick-dots button {
    margin-left: 5px;
    margin-right: 5px;
    width: 12px;
    height: 12px;
    background: #DADADA;
    border: 0;
    padding: 0;
    font-size: 0;
    border-radius: 50%;
    cursor: pointer; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
