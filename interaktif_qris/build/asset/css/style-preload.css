/**
* Interaktif QRIS Bank Indonesia
* TODO : styling for preloader
* --
* * for preloader: index.html
* * author: ilmaisme.github.io
* ? style-preload.min.css
* ! important to minify
*/
/**
* * base
*/
.preloader {
  top: 0;
  height: 100%;
  width: 100%;
  z-index: 1001;
  position: fixed;
  display: flex;
  justify-content: center;
  overflow: hidden;
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: .7s;
  background: #51b3ff;
  background: linear-gradient(180deg, #51b3ff 0%, #005596 100%); }
  .preloader.done {
    opacity: 0;
    pointer-events: none; }
  .preloaderWrap {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    position: relative; }
  .preloaderImg {
    max-width: 340px; }
    @media (min-width: 768px) {
      .preloaderImg {
        max-width: 568px; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
